AWSTemplateFormatVersion: "2010-09-09"
Description: "Lamp template for Multiple Environments defined in Parameters"

Parameters:
  vpcCidrBase:
    Type: String
    # Default: '10.1.'
  subnetStart:
    Type: String
    # Default: '1'
  env:
    Type: String
    AllowedValues:
      - dev
      - prod
  userdata:
    Type: String

## These conditions can be used to deploy resources in specific Environments
## Example : MultiAZ RDS in prod  while single AZ RDS for dev
Conditions:
  IsProd: !Equals [ !Ref env, prod ]
  IsDev: !Equals [ !Ref env, dev ]

Resources:

#####  Deploy VPC and Subnets
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        !Join
          - ''
          - - !Ref vpcCidrBase
            - !Ref subnetStart
            - '.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
       - Key: app
         Value: lamp
       - Key: Name
         Value:
          !Join
            - ''
            - - LAMP
              - 'VPC'
              - !Ref env
# Deploy Private subnets
  privatesubneta:
    DependsOn: vpc
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      MapPublicIpOnLaunch: false
      CidrBlock:
        !Join
          - ''
          - - !Ref vpcCidrBase
            - '4'
            - '.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A
      - Key: app
        Value: lamp

  privatesubnetb:
    DependsOn: vpc
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      MapPublicIpOnLaunch: false
      CidrBlock:
        !Join
          - ''
          - - !Ref vpcCidrBase
            - '5'
            - '.0/24'
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B
      - Key: app
        Value: lamp

  privatesubnetc:
    DependsOn: vpc
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      MapPublicIpOnLaunch: false
      CidrBlock:
        !Join
          - ''
          - - !Ref vpcCidrBase
            - '6'
            - '.0/24'
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the third AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-C
      - Key: app
        Value: lamp

# Deploy Public Subnets
  publicsubneta:
    DependsOn: vpc
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      MapPublicIpOnLaunch: true
      CidrBlock:
        !Join
          - ''
          - - !Ref vpcCidrBase
            - '1'
            - '.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
      - Key: app
        Value: lamp

  publicsubnetb:
    DependsOn: vpc
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      MapPublicIpOnLaunch: true
      CidrBlock:
        !Join
          - ''
          - - !Ref vpcCidrBase
            - '2'
            - '.0/24'
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the first AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B
      - Key: app
        Value: lamp

  publicsubnetc:
    DependsOn: vpc
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      MapPublicIpOnLaunch: true
      CidrBlock:
        !Join
          - ''
          - - !Ref vpcCidrBase
            - '3'
            - '.0/24'
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the first AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-C
      - Key: app
        Value: lamp

# Internet Gateway and Route Tables and Subnet Associations
  internetgateway:
    DependsOn : vpc
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: lamp-IG
      - Key: app
        Value: lamp

  attachgateway:
    DependsOn: internetgateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
         Ref: vpc
      InternetGatewayId:
         Ref: internetgateway

  publicroutetable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: publicroutetable
      - Key: app
        Value: lamp

  defaultpublicroute:
    Type: AWS::EC2::Route
    DependsOn: attachgateway
    Properties:
      RouteTableId: !Ref publicroutetable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetgateway

  publicsubnetaroutetableassociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicroutetable
      SubnetId: !Ref publicsubneta

  publicsubnetbroutetableassociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicroutetable
      SubnetId: !Ref publicsubnetb

  publicsubnetcroutetableassociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicroutetable
      SubnetId: !Ref publicsubnetc

  privateroutetable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: privateroutetable
      - Key: app
        Value: lamp

  privatesubnetaroutetableassociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateroutetable
      SubnetId: !Ref privatesubneta

  privatesubnetbroutetableassociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateroutetable
      SubnetId: !Ref privatesubnetb

  privatesubnetcroutetableassociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateroutetable
      SubnetId: !Ref privatesubnetc

# Network ACLs and subnet Associations
  networkpublicacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId:
         Ref: vpc
       Tags:
       - Key: Name
         Value: networkpublicacl
       - Key: app
         Value: lamp

  networkpublicaclegressentry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
          Ref: networkpublicacl
       RuleNumber: '100'
       Protocol: "-1"
       RuleAction: allow
       Egress: 'true'
       CidrBlock: 0.0.0.0/0


  networkpublicaclingressentry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
          Ref: networkpublicacl
       RuleNumber: '100'
       Protocol: "-1"
       RuleAction: allow
       Egress: 'false'
       CidrBlock: 0.0.0.0/0
       Icmp:
          Code: "-1"
          Type: "-1"

  PublicSubnetaNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
          Ref: publicsubneta
      NetworkAclId:
          Ref: networkpublicacl

  PublicSubnetbNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
          Ref: publicsubnetb
      NetworkAclId:
          Ref: networkpublicacl

  PublicSubnetcNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
          Ref: publicsubnetc
      NetworkAclId:
          Ref: networkpublicacl

### Private ACL and subnet Associations

  networkprivateacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId:
         Ref: vpc
       Tags:
       - Key: Name
         Value: networkprivateacl
       - Key: app
         Value: lamp

  networkprivateaclegressentry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
          Ref: networkprivateacl
       RuleNumber: '100'
       Protocol: "-1"
       RuleAction: allow
       Egress: 'true'
       CidrBlock: 0.0.0.0/0
       Icmp:
          Code: "-1"
          Type: "-1"

  networkprivateaclingressentry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
          Ref: networkprivateacl
       RuleNumber: '100'
       Protocol: "-1"
       RuleAction: allow
       Egress: 'false'
       CidrBlock: 0.0.0.0/0
       Icmp:
          Code: "-1"
          Type: "-1"

  PrivateSubnetaNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
          Ref: privatesubneta
      NetworkAclId:
          Ref: networkprivateacl

  PrivateSubnetbNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
          Ref: privatesubnetc
      NetworkAclId:
          Ref: networkprivateacl

  PrivateSubnetcNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
          Ref: privatesubnetc
      NetworkAclId:
          Ref: networkprivateacl

##### Deploying the application stack
# Instance role
  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "InstanceRole"

## lamp RDS Subnet Group and Instance
  rdssg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: lamp RDS SecurityGroup
      GroupName: rdssg
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: !GetAtt vpc.CidrBlock
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
      Tags:
        - Key: Name
          Value: rdssg
        - Key: app
          Value: lamp
      VpcId:
        Ref: vpc

  dbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "lamp DB Subnet Group"
      DBSubnetGroupName: "dbsubnetgroup"
      SubnetIds:
        - !Ref privatesubneta
        - !Ref privatesubnetb
        - !Ref privatesubnetc
      Tags:
        - Key: Name
          Value: dbSubnetGroup
        - Key: app
          Value: lamp

## RDS Instance with an example of using ssm parameters to retrieve db credentials
  db:
    DependsOn:
      - dbSubnetGroup
      - rdssg
    Type: AWS::RDS::DBInstance
    Properties:
      MultiAZ: true
      DBInstanceIdentifier: !Sub
        - lamp-${envtype}
        - { envtype: !Ref env }
      DBInstanceClass: db.t2.micro
      SourceRegion: ap-southeast-2
      DBSubnetGroupName: "dbsubnetgroup"
      VPCSecurityGroups:
        - !Ref rdssg
      AllocatedStorage: 20
      DBName: '{{resolve:ssm:dbname:1}}'
      Engine: MySQL
      EngineVersion: "5.7.22"
      MasterUserPassword: '{{resolve:ssm-secure:dbpasswd:1}}'
      MasterUsername: '{{resolve:ssm:dbuser:1}}'
      Tags:
        - Key: Name
          Value: db
        - Key: app
          Value: lamp


## lamp ASG , LaunchConfig, SecurityGroup

  albsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: lamp Instance SecurityGroup
      GroupName: albsg
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: albsg
        - Key: app
          Value: lamp
      VpcId:
        Ref: vpc

  instancesg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: lamp Instance SecurityGroup
      GroupName: instancesg
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: instancesg
        - Key: app
          Value: lamp
      VpcId:
        Ref: vpc

  instancealb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: instancealb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref albsg
      Subnets:
        - !Ref publicsubneta
        - !Ref publicsubnetb
        - !Ref publicsubnetc
      Tags:
        - Key: Name
          Value: instancealb
        - Key: app
          Value: lamp

  albtg:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref vpc
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60

  alblistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            !Ref albtg
          Type: forward
      LoadBalancerArn:
        !Ref instancealb
      Port: 80
      Protocol: HTTP

  serverasg:
    Type : AWS::AutoScaling::AutoScalingGroup
    DependsOn: db
    DependsOn:
      - instancesg
      - albsg
    Properties:
      VPCZoneIdentifier:
        - Ref: publicsubneta
        - Ref: publicsubnetb
        - Ref: publicsubnetc
      DesiredCapacity: 1
      MaxSize: 2
      MinSize: 1
      TargetGroupARNs:
        - !Ref albtg
      LaunchConfigurationName:
        Ref: serverlaunchconfig
      Tags:
        - Key: Name
          Value: instance
          PropagateAtLaunch: true
        - Key: app
          Value: lamp
          PropagateAtLaunch: true

  serverlaunchconfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: "ami-0dc96254d5535925f"
      KeyName: aws1
      SecurityGroups:
        - Ref: instancesg
      InstanceType: "t2.micro"
      UserData:
        Fn::Base64:
          Ref: userdata

  privateHostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: "Private Hosted Zone"
      Name: "int"
      VPCs:
        -
          VPCId: !Ref vpc
          VPCRegion: !Ref "AWS::Region"
      HostedZoneTags:
        -
          Key: "ZoneType"
          Value: "Internal"
        -
          Key: "Apps"
          Value: "All Internal"

  publicHostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: "Private Hosted Zone"
      Name: "public.ext."
      HostedZoneTags:
        -
          Key: "ZoneType"
          Value: "External"
        -
          Key: "Apps"
          Value: "All Public"

## R%3 Hosted zone and record sets
  dbRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref privateHostedZone
      Name: !Join ['', ['db', ., 'int', .]]
      Type: CNAME
      TTL: 300
      ResourceRecords:
      - !GetAtt db.Endpoint.Address

  lampRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref publicHostedZone
      Name: !Join ['', ['lamp', ., 'public.ext', .]]
      Type: CNAME
      TTL: 300
      ResourceRecords:
      - !GetAtt instancealb.DNSName
